{"version":3,"sources":["redax/actions.js","Components/Button/Button.jsx","Components/ContactForm/ContactForm.jsx","Components/Input/Input.jsx","Components/Filter/Filter.jsx","Components/ContactList/ContactList.jsx","Components/ContactsListItem/ContactsListItem.jsx","App.js","redax/reduser.js","redax/store.js","index.js"],"names":["addContact","createAction","payload","name","number","id","nanoid","deleteContact","filterContacts","Button","btnType","btnName","onClick","classButton","type","className","defaultProps","ContactForm","handleSubmit","handleChange","nameInputId","numberInputId","onSubmit","htmlFor","value","pattern","title","required","onChange","ButtonEl","map","Input","classInput","classLabel","generateID","Filter","filter","ContactsList","children","ContactsListItem","onDelete","contacts","App","useState","setName","setNumber","useSelector","state","items","dispatch","useDispatch","event","target","actions","reset","preventDefault","find","item","alert","length","normalizedFilter","toLocaleLowerCase","contact","includes","handleFilter","contactId","createReducer","action","element","combineReducers","store","configureStore","reducer","contatsReduser","middleware","getDefaultMiddleware","concat","logger","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d78d68b5.chunk.js","sourcesContent":["import { createAction } from \"@reduxjs/toolkit\";\r\nimport { nanoid } from \"nanoid\";\r\n\r\nconst addContact = createAction(\r\n  \"addContact\",\r\n\r\n  ({ name, number }) => {\r\n    return {\r\n      payload: {\r\n        name,\r\n        number,\r\n        id: nanoid(),\r\n      },\r\n    };\r\n  }\r\n);\r\nconst deleteContact = createAction(\"deleteContact\");\r\n\r\nconst filterContacts = createAction(\"filterContacts\");\r\n\r\nexport { addContact, deleteContact, filterContacts };\r\n","import PropTypes from 'prop-types'\r\n\r\nconst Button = ({ btnType, btnName, onClick , classButton}) => {\r\n    return (<>\r\n            <button type={btnType} onClick={onClick} className={classButton}>{btnName}</button>\r\n        </>\r\n    )\r\n}\r\n\r\nButton.defaultProps = {\r\n    btnType: \"button\",\r\n}\r\n\r\nButton.propTypes = {\r\n  btnType: PropTypes.string.isRequired,\r\n  btnName: PropTypes.string.isRequired,\r\n  price: PropTypes.func,\r\n  classButton: PropTypes.string,\r\n};\r\n\r\nexport default Button","import { nanoid } from 'nanoid';\r\n\r\nimport Button from '../Button';\r\n\r\nimport ButtonEl from './ButtonEl.json';\r\n\r\nimport './ContactForm.scss'\r\n\r\nconst ContactForm = ({handleSubmit,handleChange, name, number}) => {\r\n    const nameInputId = nanoid();\r\n    const numberInputId = nanoid();\r\n\r\n    return (\r\n        <form className=\"form-container\" onSubmit={handleSubmit}>\r\n            <label htmlFor={nameInputId} className=\"form-label\">Name</label>\r\n            <input\r\n                className=\"form-input\"\r\n                type=\"text\"\r\n                value={name}\r\n                name=\"name\"\r\n                pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n                title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n                required\r\n                onChange={handleChange}\r\n                id={nameInputId}\r\n            />\r\n            <label htmlFor={numberInputId} className=\"form-label\">Number</label>\r\n            <input\r\n                className=\"form-input\"\r\n                type=\"tel\"\r\n                name=\"number\"\r\n                value={number}\r\n                pattern=\"(\\+?( |-|\\.)?\\d{1,2}( |-|\\.)?)?(\\(?\\d{3}\\)?|\\d{3})( |-|\\.)?(\\d{3}( |-|\\.)?\\d{4})\"\r\n                title=\"Номер телефона должен состоять из 11-12 цифр и может содержать цифры, пробелы, тире, пузатые скобки и может начинаться с +\"\r\n                required\r\n                onChange={handleChange}\r\n                id={numberInputId}\r\n            />\r\n            {ButtonEl.map(({ btnType, btnName }) => {\r\n                return (<Button\r\n                    btnType={btnType}\r\n                    btnName={btnName}\r\n                    key={btnName}\r\n                    classButton=\"form-button\"\r\n                />)\r\n            })}\r\n        </form>\r\n    )\r\n}\r\n\r\n\r\nexport default ContactForm\r\n\r\n// class OldContactForm extends Component {\r\n//     state = {\r\n//         name: '',\r\n//         number: '',\r\n//     };\r\n\r\n//     nameInputId = nanoid();\r\n//     numberInputId = nanoid();\r\n\r\n//     handleChange = event => {\r\n//         const { name, value } = event.currentTarget;\r\n\r\n//         this.setState({ [name]: value });\r\n//     };\r\n\r\n//     handleSubmit = event => {\r\n//         event.preventDefault();\r\n//         this.props.onSubmit({ id: nanoid(), ...this.state });\r\n//         this.reset();\r\n//     };\r\n\r\n//     reset = () => {\r\n//         this.setState({ name: '', number: '', });\r\n//     };\r\n\r\n//     render() {\r\n//         const { name, number } = this.state;\r\n\r\n//         return (\r\n//             <form className=\"form-container\" onSubmit={this.handleSubmit}>\r\n//                 <label htmlFor={this.nameInputId} className=\"form-label\">Name</label>\r\n//                 <input\r\n//                     className=\"form-input\"\r\n//                     type=\"text\"\r\n//                     value={name}\r\n//                     name=\"name\"\r\n//                     pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n//                     title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n//                     required\r\n//                     onChange={this.handleChange}\r\n//                     id={this.nameInputId}\r\n//                 />\r\n//                 <label htmlFor={this.numberInputId} className=\"form-label\">Number</label>\r\n//                 <input\r\n//                     className=\"form-input\"\r\n//                     type=\"tel\"\r\n//                     name=\"number\"\r\n//                     value={number}\r\n//                     pattern=\"(\\+?( |-|\\.)?\\d{1,2}( |-|\\.)?)?(\\(?\\d{3}\\)?|\\d{3})( |-|\\.)?(\\d{3}( |-|\\.)?\\d{4})\"\r\n//                     title=\"Номер телефона должен состоять из 11-12 цифр и может содержать цифры, пробелы, тире, пузатые скобки и может начинаться с +\"\r\n//                     required\r\n//                     onChange={this.handleChange}\r\n//                     id={this.numberInputId}\r\n//                 />\r\n//                 {ButtonEl.map(({ btnType, btnName }) => {\r\n//                     return (<Button\r\n//                         btnType={btnType}\r\n//                         btnName={btnName}\r\n//                         key={btnName}\r\n//                         classButton=\"form-button\"\r\n//                     />)\r\n//                 })}\r\n//             </form>\r\n//         )\r\n//     }\r\n// }\r\n","import Proptypes from 'prop-types'\r\n\r\nconst Input = ({ type, value, name, pattern, title, id, onChange, classInput, classLabel }) => {\r\n  return (<>\r\n        <label htmlFor={id} className={classLabel}>{name}</label>\r\n        <input\r\n          className={classInput}\r\n          type={type}\r\n          value={value}\r\n          name={name}\r\n          pattern={pattern}\r\n          title={title}\r\n          id={id}\r\n          onChange={onChange}\r\n          required/>  \r\n        </>\r\n    )\r\n}\r\n\r\nInput.propTypes = {\r\n  type: Proptypes.string.isRequired,\r\n  value: Proptypes.string.isRequired,\r\n  name: Proptypes.string,\r\n  pattern: Proptypes.string,\r\n  title: Proptypes.string,\r\n  id: Proptypes.string.isRequired,\r\n  onChange: Proptypes.func.isRequired,\r\n  classInput: Proptypes.string,\r\n  classLabel: Proptypes.string,\r\n}\r\n\r\nexport default Input","import PropTypes from 'prop-types';\r\nimport { nanoid } from 'nanoid';\r\n\r\nimport Input from '../Input';\r\n\r\nimport './Filter.scss'\r\n\r\nconst generateID = nanoid();\r\n\r\nconst Filter = ({ filter, onChange }) => (\r\n  <Input\r\n    value={filter}\r\n    onChange={onChange}\r\n    type=\"text\"\r\n    id={generateID}\r\n    name=\"Find contacts by name\"\r\n    classLabel=\"filter-label\"\r\n    classInput=\"filter-input\"\r\n  />\r\n);\r\n\r\nFilter.propTypes = {\r\n  value: PropTypes.string,\r\n  onChange: PropTypes.func,\r\n}\r\n\r\nexport default Filter;\r\n","import PropTypes from 'prop-types';\r\n\r\nimport './ContactList.scss'\r\n\r\n\r\nconst ContactsList = ({ children }) => (\r\n  <ul className=\"contacts-list\">{ children }</ul>\r\n);\r\n\r\nContactsList.propTypes = {\r\n  children: PropTypes.node,\r\n};\r\n\r\nexport default ContactsList;","import PropTypes from 'prop-types';\r\n\r\nimport Button from \"../Button\";\r\n\r\nimport './ContactsListItem.scss'\r\n\r\nconst ContactsListItem = ({ onDelete, contacts }) => (\r\n  <>\r\n    {contacts.map(({ id, name, number }) => {\r\n      return (\r\n        <li key={id} className=\"contact-item\">\r\n          {name}: {number}\r\n          <Button\r\n            btnType=\"button\"\r\n            btnName=\"Delete\"\r\n            onClick={() => onDelete(id)}\r\n            classButton=\"contact-button\"\r\n          />\r\n        </li>\r\n      );\r\n    })}\r\n  </>\r\n);\r\n\r\nContactsListItem.propTypes = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.string.isRequired,\r\n      name: PropTypes.string.isRequired,\r\n      number: PropTypes.string.isRequired,\r\n    }),\r\n  ),\r\n  onDelete: PropTypes.func,\r\n};\r\n\r\nexport default ContactsListItem","import { useState } from \"react\";\n\nimport { useDispatch, useSelector } from \"react-redux\";\nimport * as actions from \"./redax/actions\";\n\nimport ContactForm from \"./Components/ContactForm\";\nimport Filter from \"./Components/Filter\";\nimport ContactList from \"./Components/ContactList\";\nimport ContactsListItem from \"./Components/ContactsListItem\";\n\nimport \"./App.scss\";\n\nconst App = () => {\n  const [name, setName] = useState(\"\");\n  const [number, setNumber] = useState(\"\");\n\n  const contacts = useSelector((state) => state.contacts.items);\n  const filter = useSelector((state) => state.contacts.filter);\n  const dispatch = useDispatch();\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n    switch (name) {\n      case \"name\":\n        setName(value);\n        break;\n      case \"number\":\n        setNumber(value);\n        break;\n      case \"Find contacts by name\":\n        dispatch(actions.filterContacts(value));\n        break;\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n\n    if (contacts.find((item) => item.name === name)) {\n      alert(`${name} is already in contacts`);\n      reset();\n      return;\n    }\n\n    dispatch(actions.addContact({ name, number }));\n\n    reset();\n  };\n\n  const reset = () => {\n    setName(\"\");\n    setNumber(\"\");\n  };\n\n  const deleteHandler = (contactId) => {\n    dispatch(actions.deleteContact(contactId));\n  };\n\n  const handleFilter = () => {\n    const normalizedFilter = filter.toLocaleLowerCase();\n    const filteredContactList = contacts.filter((contact) =>\n      contact.name.toLocaleLowerCase().includes(normalizedFilter)\n    );\n    return filteredContactList;\n  };\n\n  return (\n    <div className=\"container\">\n      <h2 className=\"title\">Phonebook</h2>\n      <ContactForm\n        handleSubmit={handleSubmit}\n        handleChange={handleChange}\n        name={name}\n        number={number}\n      />\n\n      <h2 className=\"secondary-title\">Contacts</h2>\n      {contacts.length > 0 ? (\n        <>\n          <Filter onChange={handleChange} filter={filter} />\n          <ContactList>\n            <ContactsListItem\n              contacts={handleFilter()}\n              onDelete={deleteHandler}\n            />\n          </ContactList>\n        </>\n      ) : (\n        <span className=\"contact-message\">You have no contacts yet </span>\n      )}\n    </div>\n  );\n};\n\nApp.defaultProps = {\n  contacts: [],\n  filter: \"\",\n  name: \"\",\n  number: \"\",\n};\n\nexport default App;\n\n// class OldApp extends Component {\n//   state = {\n//     contacts: [],\n//     // contacts: [\n//     //   { id: \"id-1\", name: \"Rosie Simpson\", number: \"459-12-56\" },\n//     //   { id: \"id-2\", name: \"Hermione Kline\", number: \"443-89-12\" },\n//     //   { id: \"id-3\", name: \"Eden Clements\", number: \"645-17-79\" },\n//     //   { id: \"id-4\", nnme: \"Annie Copeland\", number: \"227-91-26\" },\n//     // ],\n//     filter: \"\",\n//   };\n\n//   componentDidMount() {\n//     const locStorContacts = localStorage.getItem(\"contacts\");\n//     const parsedContacts = JSON.parse(locStorContacts);\n\n//     if (parsedContacts) {\n//       this.setState({ contacts: parsedContacts });\n//     }\n//   }\n\n//   componentDidUpdate(prevProps, prevState) {\n//     if (this.state.contacts !== prevState.contacts) {\n//       localStorage.setItem(\"contacts\", JSON.stringify(this.state.contacts));\n//     }\n//   }\n\n// formSubmitHandler = (data) => {\n//   const isInContacts = (contact) => {\n//     return contact.name === data.name;\n//   };\n//   if (this.state.contacts.some(isInContacts)) {\n//     alert(`${data.name} is already in contacts`);\n//   } else\n//     this.setState((prevState) => ({\n//       contacts: [...prevState.contacts, data],\n//     }));\n// };\n\n// filterHandler = (event) => {\n//   const { value } = event.currentTarget;\n//   this.setState({ filter: value });\n// };\n\n// deleteHandler = (contactId) => {\n//   this.setState((prevState) => ({\n//     contacts: prevState.contacts.filter(\n//       (contact) => contact.id !== contactId\n//     ),\n//   }));\n// };\n\n//   render() {\n//     const { contacts, filter } = this.state;\n\n// const normalizedFilter = filter.toLocaleLowerCase();\n// const filteredContactList = contacts.filter((contact) =>\n//   contact.name.toLocaleLowerCase().includes(normalizedFilter)\n// );\n//     return (\n//       <div className=\"container\">\n//         <h2 className=\"title\">Phonebook</h2>\n//         <ContactForm onSubmit={this.formSubmitHandler} />\n\n//         <h2 className=\"secondary-title\">Contacts</h2>\n//         {contacts.length > 0 ? (\n//           <>\n//             <Filter onChange={this.filterHandler} value={filter} />\n//             <ContactList>\n//               <ContactsListItem\n//                 contacts={filteredContactList}\n//                 onDelete={this.deleteHandler}\n//               />\n//             </ContactList>\n//           </>\n//         ) : (\n//           <span className=\"contact-message\">You have no contacts yet </span>\n//         )}\n//       </div>\n//     );\n//   }\n// }\n","import { createReducer, combineReducers } from \"@reduxjs/toolkit\";\r\nimport { addContact, deleteContact, filterContacts } from \"./actions\";\r\n\r\nconst items = createReducer([], {\r\n  [addContact]: (state, action) => [...state, action.payload],\r\n  [deleteContact]: (state, action) =>\r\n    state.filter((element) => element.id !== action.payload),\r\n});\r\n\r\nconst filter = createReducer(\"\", {\r\n  [filterContacts]: (state, action) => action.payload,\r\n});\r\n\r\nexport default combineReducers({\r\n  items,\r\n  filter,\r\n});\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport logger from \"redux-logger\";\r\nimport contatsReduser from \"./reduser\";\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    contacts: contatsReduser,\r\n  },\r\n  middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(logger),\r\n});\r\n\r\nexport { store };\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\n\nimport App from \"./App\";\nimport { store } from \"./redax/store\";\n\nimport \"./base.scss\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}